from ranking_service.src.utils.util import check_for_content, get_current_utc_datetime
from ranking_service.src.utils import *
from ranking_service.src.team_agents.common.agent import Agent
from ranking_service.src.team_agents.skill_matching_agent.prompts.matching_experience import *
from termcolor import colored

class MatchingExperienceAgent(Agent):
    def invoke(self, candidate_experience, job_experience, prompt_template = matching_experience_prompt_template, feedback=None):
        """
        So kh·ªõp s·ªë nƒÉm kinh nghi·ªám gi·ªØa y√™u c·∫ßu c√¥ng vi·ªác v√† kinh nghi·ªám c·ªßa ·ª©ng vi√™n.

        Args:
            candidate_experience (list): Danh s√°ch c√°c kinh nghi·ªám c·ªßa ·ª©ng vi√™n.
            job_experience (list): Danh s√°ch c√°c tr√°ch nhi·ªám c√¥ng vi·ªác k√®m theo s·ªë nƒÉm kinh nghi·ªám y√™u c·∫ßu.
            prompt_template (str): Prompt m·∫´u ƒë·ªÉ so s√°nh kinh nghi·ªám.
            feedback (callable or None): H√†m ho·∫∑c gi√° tr·ªã ph·∫£n h·ªìi, n·∫øu c√≥.

        Returns:
            dict: K·∫øt qu·∫£ JSON v·ªõi so kh·ªõp kinh nghi·ªám.
        """
        print("---------------MatchingExperienceAgent-----------")

        # X·ª≠ l√Ω feedback n·∫øu c√≥
        feedback_value = feedback() if callable(feedback) else feedback
        feedback_value = check_for_content(feedback_value)

        # T·∫°o prompt v·ªõi job responsibilities v√† candidate experience
        prompt = prompt_template.format(
            job_responsibilities="\n".join(job_experience),
            datetime=get_current_utc_datetime()
        )

        # T·∫°o th√¥ng ƒëi·ªáp input cho m√¥ h√¨nh
        messages = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": f"### Candidate's Experience: {str(candidate_experience)}"}
        ]

        # G·ªçi LLM ƒë·ªÉ l·∫•y k·∫øt qu·∫£ so s√°nh
        llm = self.get_llm()
        ai_response = llm.invoke(messages)
        response = check_for_content(ai_response)
        json_response = json.loads(response)

        for item in json_response["experience_comparison"]:
            if item.get("required_years") is not None and item.get("candidate_years") is not None:
                item["experience_percentage"] = min((int(item["candidate_years"]) / int(item["required_years"])) * 100, 100)
            else: item["experience_percentage"] = 0
        # T√≠nh ƒëi·ªÉm trung b√¨nh
        total_percentage = sum(item["experience_percentage"] for item in json_response["experience_comparison"])
        average_percentage = total_percentage / len(json_response["experience_comparison"])

        # C·∫≠p nh·∫≠t overall_experience_percentage trong json_response
        json_response["average_experience_percentage"] = average_percentage

        # In k·∫øt qu·∫£
        print(colored(f"MatchingExperienceAgent üßëüèº‚Äçüíª: {json_response}", 'blue'))

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        return json_response